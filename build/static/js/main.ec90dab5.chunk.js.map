{"version":3,"sources":["features/cameraSlice.js","WebcamCapture.js","firebase.js","Preview.js","App.js","features/appSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["cameraSlice","createSlice","name","initialState","value","cameraImage","reducers","setCameraImage","state","action","payload","resetCameraImage","actions","selectcamera","camera","videoConstraints","width","height","facingMode","WebcamCapture","webcamref","useRef","dispatch","useDispatch","history","useHistory","capture","useCallback","imgSrc","current","getScreenshot","push","className","audio","ref","screenshotFormat","onClick","fontSize","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","storage","auth","GoogleAuthProvider","Preview","useSelector","useEffect","replace","src","alt","id","uuid","putString","on","error","console","log","child","getDownloadURL","then","url","collection","add","imageUrl","username","read","timestamp","FieldValue","serverTimestamp","App","exact","path","appSlice","incrementByAmount","store","configureStore","reducer","app","appReducer","cameraReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec90dab5.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const cameraSlice = createSlice({\r\n  name: 'camera',\r\n  initialState:{\r\n    value:0,\r\n    cameraImage: null\r\n  },\r\n  reducers: {\r\n    setCameraImage: (state, action) => {\r\n      state.cameraImage = action.payload;\r\n    },\r\n    resetCameraImage: (state, action) => {\r\n        state.cameraImage = null\r\n      },\r\n  },\r\n});\r\n\r\nexport const { setCameraImage, resetCameraImage } = cameraSlice.actions;\r\n\r\nexport const selectcamera = (state) => state.camera.cameraImage;\r\n\r\nexport default cameraSlice.reducer;\r\n","import { useCallback, useRef, useState } from \"react\"\r\nimport Webcam from \"react-webcam\"\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setCameraImage } from \"./features/cameraSlice\";\r\nimport { useHistory } from \"react-router\";\r\nimport \"./WebcamCapture.css\"\r\nconst videoConstraints = {\r\n    width: 250,\r\n    height: 400,\r\n    facingMode: \"user\"\r\n}\r\n\r\nfunction WebcamCapture() {\r\n    const webcamref = useRef(null)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory();\r\n\r\n\r\n    const capture = useCallback(() => {\r\n            const imgSrc = webcamref.current.getScreenshot();\r\n            dispatch(setCameraImage(imgSrc))\r\n            history.push('/preview')\r\n        },\r\n        [webcamref],\r\n    )\r\n\r\n    return (\r\n        <div className=\"webcamCapture\"> \r\n            <Webcam \r\n                audio={false}\r\n                height={videoConstraints.height}\r\n                ref={webcamref}\r\n                width={videoConstraints.width}\r\n                videoConstraints={videoConstraints}\r\n                screenshotFormat=\"image/jpeg\"\r\n            />\r\n            <RadioButtonUncheckedIcon \r\n                className=\"webcamCapture__button\"\r\n                onClick={capture}\r\n                fontSize=\"large\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WebcamCapture\r\n","import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCrPQQNIh2ujh7Xs1eDvyFhWM3p5AhPBAc\",\r\n    authDomain: \"snapchat-clone-6687e.firebaseapp.com\",\r\n    projectId: \"snapchat-clone-6687e\",\r\n    storageBucket: \"snapchat-clone-6687e.appspot.com\",\r\n    messagingSenderId: \"151268407242\",\r\n    appId: \"1:151268407242:web:938c900c0d28535f378133\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig)\r\n  const db = firebaseApp.firestore()\r\n  const auth = firebase.auth();\r\n  const storage = firebase.storage();\r\n\r\n  const provider = new firebase.auth.GoogleAuthProvider()\r\n\r\n  export {db, storage, provider, auth };","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\nimport { resetCameraImage, selectcamera } from './features/cameraSlice'\r\nimport \"./Preview.css\"\r\nimport CloseIcon from \"@material-ui/icons/Close\"\r\nimport TextFieldIcon from \"@material-ui/icons/TextFields\"\r\nimport CreateIcon from \"@material-ui/icons/Create\"\r\nimport NoteIcon from \"@material-ui/icons/Note\"\r\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\"\r\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\"\r\nimport CropIcon from \"@material-ui/icons/Crop\"\r\nimport TimerIcon from \"@material-ui/icons/Timer\"\r\nimport SendIcon from \"@material-ui/icons/Send\"\r\nimport { v4 as uuid } from \"uuid\"\r\nimport { db, storage } from './firebase'\r\nimport firebase from 'firebase'\r\n\r\nfunction Preview() {\r\n    const cameraImage = useSelector(selectcamera)\r\n    const history = useHistory();\r\n    const dispatch = useDispatch()\r\n    const closePreview = () => {\r\n        dispatch(resetCameraImage())\r\n    }\r\n\r\n    const sendPost = () => {\r\n        const id = uuid();\r\n        const uploadTask = storage.ref(`post/${id}`).putString(cameraImage, 'data_url')\r\n\r\n        uploadTask.on('state_changed', null, \r\n        (error) => { console.log(error) }, \r\n        () => { \r\n            storage\r\n                .ref('posts')\r\n                .child(id)\r\n                .getDownloadURL()\r\n                .then((url)=>{\r\n                    db.collection('posts').add({\r\n                        imageUrl: url,\r\n                        username:\"Ankit\",\r\n                        read: false,\r\n                        // profilePic,\r\n                        timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n                });\r\n                history.replace('/chats')\r\n            })\r\n         })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!cameraImage) {\r\n            history.replace('/')\r\n        }\r\n    }, [cameraImage, history])\r\n\r\n    return (\r\n        <div className=\"preview\">\r\n            <CloseIcon onClick={closePreview} className=\"preview__close\" />\r\n            <div className=\"preview__toolbarRight\">\r\n                <TextFieldIcon />\r\n                <CreateIcon />\r\n                <NoteIcon />\r\n                <MusicNoteIcon />\r\n                <AttachFileIcon />\r\n                <CropIcon />\r\n                <TimerIcon />\r\n            </div>\r\n            <img src={cameraImage} alt=\"\" />\r\n            <div onClick={sendPost} className=\"preview__footer\">\r\n                <h2>Send Now</h2>\r\n                <SendIcon fontSize=\"small\" className=\"preview__sendIcon\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preview\r\n","import React from 'react';\nimport './App.css';\nimport WebcamCapture from './WebcamCapture';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Preview from './Preview';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Router>\n      <div className=\"app__body\">       \n        <Switch>\n        <Route exact path=\"/\">\n            <WebcamCapture />\n          </Route>\n          <Route exact path=\"/preview\">\n            <Preview />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState:{\n    value:0\n  },\n  reducers: {\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { incrementByAmount } = appSlice.actions;\n\nexport const selectapp = (state) => state.app.value;\n\nexport default appSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport appReducer from '../features/appSlice';\nimport cameraReducer from '../features/cameraSlice';\n\nexport const store = configureStore({\n  reducer: {\n    app: appReducer,\n    camera: cameraReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}